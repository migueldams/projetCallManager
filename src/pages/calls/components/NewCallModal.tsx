
import { motion } from 'framer-motion';
import { useState } from 'react';
import { useAppStore } from '../../../store/appStore';
import { useAuthStore } from '../../../store/authStore';
import * as Dialog from '@radix-ui/react-dialog';
import toast from 'react-hot-toast';
import type { Call } from '../../../types';

interface NewCallModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function NewCallModal({ isOpen, onClose }: NewCallModalProps) {
  const { addCall } = useAppStore();
  const { user } = useAuthStore();
  const [step, setStep] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  
  const [formData, setFormData] = useState({
    customerName: '',
    customerPhone: '',
    campaign: 'Vente Premium',
    notes: '',
    outcome: '',
  });

  const campaigns = [
    'Vente Premium',
    'Satisfaction Client', 
    'Prospection',
    'Renouvellement',
    'Support Technique',
  ];

  const handleInputChange = (field: string, value: string) => {
    setFormData({ ...formData, [field]: value });
  };

  const handleSubmit = async () => {
    if (!formData.customerName || !formData.customerPhone) {
      toast.error('Veuillez remplir tous les champs obligatoires');
      return;
    }

    setIsLoading(true);

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));

      const newCall: Call = {
        id: `call-${Date.now()}`,
        agentId: user?.id || '1',
        customerName: formData.customerName,
        customerPhone: formData.customerPhone,
        campaign: formData.campaign,
        startTime: new Date().toISOString(),
        duration: 0,
        status: 'en_cours',
        outcome: formData.outcome,
        notes: formData.notes,
        tags: [], // Will be auto-generated by AI
      };

      addCall(newCall);
      toast.success('Appel créé avec succès !');
      onClose();
      
      // Reset form
      setFormData({
        customerName: '',
        customerPhone: '',
        campaign: 'Vente Premium',
        notes: '',
        outcome: '',
      });
      setStep(1);
    } catch (error) {
      toast.error('Erreur lors de la création de l\'appel');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog.Root open={isOpen} onOpenChange={onClose}>
      <Dialog.Portal>
        <Dialog.Overlay asChild>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
          />
        </Dialog.Overlay>
        
        <Dialog.Content asChild>
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: 20 }}
            className="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-2xl bg-white dark:bg-gray-800 rounded-2xl shadow-2xl z-50 overflow-hidden"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center">
                  <i className="ri-phone-add-line text-white text-xl"></i>
                </div>
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                    Nouveau appel
                  </h2>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Démarrer un nouvel appel client
                  </p>
                </div>
              </div>
              
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={onClose}
                className="p-2 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 cursor-pointer"
              >
                <i className="ri-close-line text-xl"></i>
              </motion.button>
            </div>

            {/* Progress Bar */}
            <div className="px-6 py-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
                  Étape {step} sur 2
                </span>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {step === 1 ? 'Informations client' : 'Détails de l\'appel'}
                </span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                <motion.div
                  initial={{ width: '50%' }}
                  animate={{ width: step === 1 ? '50%' : '100%' }}
                  className="bg-gradient-to-r from-green-500 to-green-600 h-2 rounded-full"
                />
              </div>
            </div>

            {/* Form Content */}
            <div className="px-6 pb-6">
              {step === 1 ? (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="space-y-6"
                >
                  {/* Customer Name */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Nom du client *
                    </label>
                    <input
                      type="text"
                      value={formData.customerName}
                      onChange={(e) => handleInputChange('customerName', e.target.value)}
                      placeholder="Ex: Jean Dupont"
                      className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      autoFocus
                    />
                  </div>

                  {/* Phone Number */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Numéro de téléphone *
                    </label>
                    <input
                      type="tel"
                      value={formData.customerPhone}
                      onChange={(e) => handleInputChange('customerPhone', e.target.value)}
                      placeholder="Ex: +33 1 23 45 67 89"
                      className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    />
                  </div>

                  {/* Campaign */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Campagne
                    </label>
                    <div className="relative">
                      <select
                        value={formData.campaign}
                        onChange={(e) => handleInputChange('campaign', e.target.value)}
                        className="w-full px-4 py-3 pr-8 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent appearance-none cursor-pointer"
                      >
                        {campaigns.map(campaign => (
                          <option key={campaign} value={campaign}>
                            {campaign}
                          </option>
                        ))}
                      </select>
                      <i className="ri-arrow-down-s-line absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none"></i>
                    </div>
                  </div>

                  {/* AI Suggestions */}
                  <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-2xl border border-blue-200 dark:border-blue-800">
                    <div className="flex items-start space-x-3">
                      <i className="ri-robot-line text-blue-600 dark:text-blue-400 mt-0.5"></i>
                      <div>
                        <h4 className="font-medium text-blue-900 dark:text-blue-100 mb-2">
                          Suggestions IA
                        </h4>
                        <p className="text-sm text-blue-700 dark:text-blue-300">
                          • Meilleur créneau : 14h-16h (+23% de réponse)
                          <br />
                          • Client potentiellement intéressé par l'offre Premium
                          <br />
                          • Mentionner la promotion en cours (-20% jusqu'au 31/01)
                        </p>
                      </div>
                    </div>
                  </div>
                </motion.div>
              ) : (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="space-y-6"
                >
                  {/* Notes */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Notes préliminaires
                    </label>
                    <textarea
                      value={formData.notes}
                      onChange={(e) => handleInputChange('notes', e.target.value)}
                      placeholder="Notes ou contexte avant l'appel..."
                      className="w-full h-24 px-4 py-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none"
                    />
                  </div>

                  {/* Outcome */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Objectif de l'appel
                    </label>
                    <input
                      type="text"
                      value={formData.outcome}
                      onChange={(e) => handleInputChange('outcome', e.target.value)}
                      placeholder="Ex: Présentation offre Premium"
                      className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-2xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    />
                  </div>

                  {/* Call Summary */}
                  <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-2xl">
                    <h4 className="font-medium text-gray-900 dark:text-white mb-3">
                      Récapitulatif
                    </h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600 dark:text-gray-400">Client :</span>
                        <span className="text-gray-900 dark:text-white font-medium">
                          {formData.customerName}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600 dark:text-gray-400">Téléphone :</span>
                        <span className="text-gray-900 dark:text-white font-medium">
                          {formData.customerPhone}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600 dark:text-gray-400">Campagne :</span>
                        <span className="text-gray-900 dark:text-white font-medium">
                          {formData.campaign}
                        </span>
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
            </div>

            {/* Footer */}
            <div className="flex items-center justify-between p-6 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-750">
              <div className="flex items-center space-x-4">
                {step === 2 && (
                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setStep(1)}
                    className="px-6 py-2 text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 cursor-pointer whitespace-nowrap"
                  >
                    <div className="flex items-center space-x-2">
                      <i className="ri-arrow-left-line"></i>
                      <span>Précédent</span>
                    </div>
                  </motion.button>
                )}
              </div>

              <div className="flex items-center space-x-4">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={onClose}
                  className="px-6 py-2 text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 cursor-pointer whitespace-nowrap"
                >
                  Annuler
                </motion.button>
                
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={step === 1 ? () => setStep(2) : handleSubmit}
                  disabled={isLoading || !formData.customerName || !formData.customerPhone}
                  className="px-6 py-2 bg-green-600 text-white rounded-2xl hover:bg-green-700 transition-colors cursor-pointer whitespace-nowrap disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isLoading ? (
                    <div className="flex items-center space-x-2">
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                      >
                        <i className="ri-loader-4-line"></i>
                      </motion.div>
                      <span>Création...</span>
                    </div>
                  ) : (
                    <div className="flex items-center space-x-2">
                      <i className={step === 1 ? 'ri-arrow-right-line' : 'ri-phone-line'}></i>
                      <span>{step === 1 ? 'Suivant' : 'Démarrer l\'appel'}</span>
                    </div>
                  )}
                </motion.button>
              </div>
            </div>
          </motion.div>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  );
}
